面向对象oop：
封装
继承
多态


super注意点：
    1、super调用父类的构造方法，必须是在构造方法的第一个
    2、super必须只能出现在子类的方法中或者构造方法中
    3、super和this不能同时调用构造方法

super VS this：
    1、代表的对象不同：
        this： 本身调用者这个对象
        super： 代表父类对象的引用
    2、前提：
        this：没有继承也可以使用
        super：只能在继承条件下才能使用
    3、构造方法的区别：
        this（）：本类的构造
        super（）：父类的构造


方法重写：
    1、需要有继承关系，子类重写父类的方法
    2、方法名必须相同
    3、参数列表必须相同
    4、修饰符：范围可以扩大不能缩小 public > protected >default >private
    5、抛出的异常：范围可以被缩小，不能被扩大

为什么需要重写：
    1、父类的功能，子类不一定需要，或者不一定满足！

多态：
    1、多态是方法的多态，和属性无关
    2、父类和子类，有联系   类型转换异常ClassCastException
    3、存在的条件：继承关系，方法需要重写，父类的引用指向子类对象。Father f = new Son();
    注意：
        1、static方法属于类，它不属于实例，不能重写
        2、final常量
        3、private方法不能重写



接口：
    作用：
        1、约束
        2、定义一些方法，让不同的人实现
        3、方法都是被public abstract修饰
        4、属性都是被public static final 修饰的常量
        5、接口不能直接被实例化，接口中没有构造方法
        6、接口可以实现多个implements
        7、实现接口必须要重写接口中的方法


异常：
    1、处理 运行异常 时，采用逻辑去合理规避，同时辅助try-catch处理
    2、在多重catch块后面，可以加上一个catch(Exception)来处理可能会被遗漏的异常！
    3、对于不确定的代码，也可以加上try-catch，处理潜在异常
    4、尽量去处理异常，切忌只是简单的调用printStackTrace()去打印输出
    5、具体如何处理异常，要根据业务的需求和异常类型决定
    6、尽量添加finally语句块去释放占用的资源。